---
- name: wait to connect, might be rebooting still
  block:
    - name: wait to connect
      wait_for_connection:
        delay: 0
        timeout: 300
  rescue:
    - name: handle connection error
      fail:
        msg: "Could not connect"

- name: Include system setup tasks
  include_tasks:
    file: setup_server.yml
    apply:
      tags:
        - wg-install
  tags:
    - wg-install

- name: Determine if VPN mode is client or server
  set_fact:
    wireguard_server_mode: true
  when: inventory_hostname in groups['tag_vpn_gateway']

    
- name: Create WireGuard configuration directory
  ansible.builtin.file:
    dest: "{{ wireguard_remote_directory }}"
    state: directory
    mode: 0755
  become: yes
  tags:
    - wg-config

- name: Enable WireGuard kernel module
  community.general.modprobe:
    name: wireguard
    state: present
  register: wireguard__register_module_enabled
  until: wireguard__register_module_enabled is succeeded
  retries: 10
  delay: 10
  failed_when: wireguard__register_module_enabled is failure
  become: yes
  tags:
    - wg-install
  when: not ansible_os_family == 'Darwin'

- name: Set default for WireGuard interface restart behavior
  ansible.builtin.set_fact:
    wireguard__restart_interface: >-
      {%- if wireguard_interface_restart -%}
      true
      {%- else -%}
      false
      {%- endif %}
      
- name: Make sure wg syncconf option is available
  block:
    - name: Get available wg subcommands
      ansible.builtin.command: "wg --help"
      register: wireguard__register_subcommands
      changed_when: false
      check_mode: false

    - name: Check if wg syncconf subcommand is available
      ansible.builtin.set_fact:
        wireguard__syncconf_avail: "{{ 'syncconf:' in wireguard__register_subcommands.stdout }}"

    - name: wg syncconf subcommand available
      ansible.builtin.debug:
        var: wireguard__syncconf_avail

    - name: Fall back to interface restart if wg syncconf is not available
      ansible.builtin.set_fact:
        wireguard__restart_interface: true
      when:
        - not wireguard__syncconf_avail
  when:
    - not wireguard_interface_restart
  tags:
    - wg-config

- name: Final decision on WireGuard interface restart method
  ansible.builtin.debug:
    msg: >-
      {%- if wireguard__restart_interface -%}
      'restart'
      {%- else -%}
      'syncconf'
      {%- endif %}

- name: Register if config/private key already exists on target host
  ansible.builtin.stat:
    path: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
  register: wireguard__register_config_file
  tags:
    - wg-generate-keys
    - wg-config

- name: WireGuard private key handling for new keys
  block:
    - name: Generate WireGuard private key
      ansible.builtin.command: "wg genkey"
      register: wireguard__register_private_key
      changed_when: false
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-generate-keys

    - name: Set private key fact
      ansible.builtin.set_fact:
        wireguard_private_key: "{{ wireguard__register_private_key.stdout }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-generate-keys
  when:
    - not wireguard__register_config_file.stat.exists
    - wireguard_private_key is not defined
    - wireguard_server_mode

- name: WireGuard private key handling for existing keys
  block:
    - name: Read WireGuard config file
      ansible.builtin.slurp:
        src: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
      register: wireguard__register_config
      no_log: '{{ ansible_verbosity < 3 }}'
      become: yes
      tags:
        - wg-config

    - name: Set private key fact
      ansible.builtin.set_fact:
        wireguard_private_key: "{{ wireguard__register_config['content'] | b64decode | regex_findall('PrivateKey = (.*)') | first }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-config
  when:
    - wireguard__register_config_file.stat.exists
    - wireguard_private_key is not defined
    - wireguard_server_mode


- name: Derive WireGuard public key
  ansible.builtin.command: "wg pubkey"
  args:
    stdin: "{{ wireguard_private_key }}"
  register: wireguard__register_public_key
  changed_when: false
  check_mode: false
  no_log: '{{ ansible_verbosity < 3 }}'
  tags:
    - wg-config
  when: 
    - wireguard_server_mode

- name: Set public key fact
  ansible.builtin.set_fact:
    wireguard__fact_public_key: "{{ wireguard__register_public_key.stdout }}"
  tags:
    - wg-config
  when: 
    - wireguard_server_mode


- name: Generate keys for clients
  include_tasks: generate_client_keys.yml
  loop: "{{ clients }}"
  loop_control:
    loop_var: client
    index_var: client_idx
  when: 
    - wireguard_server_mode


- name: Generate WireGuard configuration file (server)
  ansible.builtin.template:
    src: etc/wireguard/server-wg.conf.j2
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
  #no_log: '{{ ansible_verbosity < 3 }}'
  become: yes
  tags:
    - wg-config
  notify:
    - reconfigure wireguard
  when: 
    - wireguard_server_mode

- name: Generate WireGuard configuration file (client)
  ansible.builtin.template:
    src: etc/wireguard/client-wg.conf.j2
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
  no_log: '{{ ansible_verbosity < 3 }}'
  vars:
    server_ip: "{{ wireguard__server_ip }}"

  become: yes
  tags:
    - wg-config
  notify:
    - reconfigure wireguard
  when: 
    - not wireguard_server_mode

- name: Ensure legacy reload-module-on-update is absent
  ansible.builtin.file:
    dest: "{{ wireguard_remote_directory }}/.reload-module-on-update"
    state: absent
  become: yes
  tags:
    - wg-config

- name: Start and enable WireGuard service
  ansible.builtin.service:
    name: "wg-quick@{{ wireguard_interface }}"
    state: "{{ wireguard_service_state }}"
    enabled: "{{ wireguard_service_enabled }}"
  become: yes
  when: not ansible_os_family == 'Darwin'